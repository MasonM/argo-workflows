# This example demonstrates daemoned steps when used in in DAG templates. It is equivalent to the
# daemon-step.yaml example, but written in DAG format. The IP address of the daemoned step can be
# referenced using the '{{tasks.taskname.ip}}' variable.
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: dag-daemon-task-
spec:
  entrypoint: daemon-example
  templates:
  - name: daemon-example
    dag:
      tasks:
      - name: influx
        template: influxdb

      - name: init-database
        template: init-database
        depends: "influx"
        arguments:
          parameters:
            - name: influx_ip
              value: "{{tasks.influx.ip}}"

      - name: producer-1
        template: producer
        depends: "init-database"
        arguments:
          parameters:
            - name: influx_ip
              value: "{{tasks.influx.ip}}"
            - name: server
              value: server01
      - name: producer-2
        template: producer
        depends: "init-database"
        arguments:
          parameters:
            - name: influx_ip
              value: "{{tasks.influx.ip}}"
            - name: server
              value: server02
      - name: producer-3
        template: producer
        depends: "init-database"
        arguments:
          parameters:
            - name: influx_ip
              value: "{{tasks.influx.ip}}"
            - name: server
              value: server03

      - name: consumer
        template: consumer
        depends: "producer-1 && producer-2 && producer-3"
        arguments:
          parameters:
            - name: influx_ip
              value: "{{tasks.influx.ip}}"

  - name: influxdb
    daemon: true
    container:
      image: influxdb:1.2
      readinessProbe:
        httpGet:
          path: /ping
          port: 8086
        initialDelaySeconds: 5
        timeoutSeconds: 1

  - name: init-database
    inputs:
      parameters:
        - name: influx_ip
    hostAliases:
    - ip: "{{inputs.parameters.influx_ip}}"
      hostnames: [influx.local]
    container:
      image: appropriate/curl:latest
      args: ["-XPOST", "http://influx.local:8086/query", "--data-urlencode", "q=CREATE DATABASE mydb"]

  - name: producer
    inputs:
      parameters:
        - name: influx_ip
        - name: server
    hostAliases:
    - ip: "{{inputs.parameters.influx_ip}}"
      hostnames: [influx.local]
    container:
      image: appropriate/curl:latest
      command: [sh, -c, 'for i in $(seq 1 20); do curl -XPOST "http://influx.local:8086/write?db=mydb" -d "cpu,host=$SERVER,region=uswest load=$i" ; sleep .5 ; done']
      env:
        - name: SERVER
          value: "{{inputs.parameters.server}}"

  - name: consumer
    inputs:
      parameters:
        - name: influx_ip
    hostAliases:
    - ip: "{{inputs.parameters.influx_ip}}"
      hostnames: [influx.local]
    container:
      image: appropriate/curl:latest
      args: ["--silent", "-G", "http://influx.local:8086/query?pretty=true", "--data-urlencode", "db=mydb", "--data-urlencode", "q=SELECT * FROM cpu"]